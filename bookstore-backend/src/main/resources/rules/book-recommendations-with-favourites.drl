package rules;

import com.example.bookstorebackend.book.Book;
import com.example.bookstorebackend.person.model.Author
import com.example.bookstorebackend.rating.model.Rating;
import com.example.bookstorebackend.genre.Genre;
import com.example.bookstorebackend.genre.Genre;
import com.example.bookstorebackend.order.model.Order;
import com.example.bookstorebackend.orderItem.OrderItem;
import com.example.bookstorebackend.utils.helpers.OldUserRecommendationHelper;
import java.util.List;
import java.util.stream.Collectors
import java.util.Comparator
import java.util.ArrayList
import java.util.Collections;
import com.example.bookstorebackend.person.model.User
import com.example.bookstorebackend.person.model.Person
import com.example.bookstorebackend.book.BookCharacteristics
import java.util.Set
import java.util.HashSet
import java.util.Map
import java.util.TreeMap
import java.util.stream.Stream
import java.util.LinkedHashMap
import java.time.LocalDate;

global java.util.ArrayList<Book> recommendedBooks;
global com.example.bookstorebackend.person.model.User specificUser;
global java.util.concurrent.ConcurrentHashMap<Book,Integer> recommendedBooksWithScores;

rule "Users similarity based on Pearson correlation coefficient"
salience 25
no-loop true
when
    $user: User(id == specificUser.getId(), getRatingsNumber() >= 10)
    $user2: User(id != specificUser.getId())
    $books: List(size > 0) from collect(Book())
    $similarity: Double() from OldUserRecommendationHelper.calculateSimilarity($user, $user2)
    eval($similarity >= 0.5)
    $booksLikedBySimilarUser: List() from collect(Book() from OldUserRecommendationHelper.collectBooksLikedByUser($user2))
then
    System.out.println("Rule [Users similarity based on Pearson correlation coefficient] - fired");
    recommendedBooksWithScores = OldUserRecommendationHelper.addBooksToHashMap($booksLikedBySimilarUser, recommendedBooksWithScores);
    recommendedBooks = OldUserRecommendationHelper.addBooksToList($booksLikedBySimilarUser, recommendedBooks);
end

rule "Book recommendation based on similarity"
salience 20
no-loop true
when
    $user: User(id == specificUser.getId() && getRatingsNumber() >= 10)
    $books: List(size > 0) from collect(Book())
    $userRatings: List(size > 0) from collect(Rating() from $user.getRatings())
    $similarBooks: List(size > 0) from collect(Book() from OldUserRecommendationHelper.getSimilarBooks($books, $userRatings))
then
    System.out.println("Rule [Book recommendation based on similarity] - fired");
    recommendedBooksWithScores = OldUserRecommendationHelper.addBooksToHashMap($similarBooks, recommendedBooksWithScores);
    recommendedBooks = OldUserRecommendationHelper.addBooksToList($similarBooks, recommendedBooks);
end

rule "Recommend books based on authors"
salience 15
no-loop true
when
    $user: User(id == specificUser.getId() && getRatingsNumber() >= 10)
    $author: Author()
    $numOfAuthorBuys: Integer() from OldUserRecommendationHelper.getNumOfAuthorBuys($author, $user.getOrders())
    eval($numOfAuthorBuys >= 3)
    $booksToAddBasedOnPreferenceByAuthor: List() from collect(Book() from $author.getBooks())
then
    System.out.println("Rule [Recommend books based on user preferences (authors)] - fired");
    recommendedBooksWithScores = OldUserRecommendationHelper.addBooksToHashMap($booksToAddBasedOnPreferenceByAuthor, recommendedBooksWithScores);
    recommendedBooks = OldUserRecommendationHelper.addBooksToList($booksToAddBasedOnPreferenceByAuthor, recommendedBooks);
end

rule "Recommend books based on genres"
salience 10
no-loop true
when
    $user: User(id == specificUser.getId() && getRatingsNumber() >= 10)
    $genres: List(size > 0) from collect(Genre())
    $books: List(size > 0) from collect(Book())
    $genresToRecommend: List(size > 0) from collect(Genre() from OldUserRecommendationHelper.getGenresToRecommend($genres, $user.getOrders()))
    $booksToAddBasedOnPreferenceByGenre: List(size > 0) from collect(Book() from OldUserRecommendationHelper.getBooksByGenres($genres, $books))
then
    System.out.println("Rule [Recommend books based on user preferences (genres)] - fired");
    recommendedBooksWithScores = OldUserRecommendationHelper.addBooksToHashMap($booksToAddBasedOnPreferenceByGenre, recommendedBooksWithScores);
    recommendedBooks = OldUserRecommendationHelper.addBooksToList($booksToAddBasedOnPreferenceByGenre, recommendedBooks);
end

rule "Final recommendation"
salience 5
no-loop true
when
      $user: User(id == specificUser.getId() && getRatingsNumber() >= 10)
      $booksToRecommendSorted: List(size > 0) from collect(Book() from OldUserRecommendationHelper.extractAndSortBooksFromMap(recommendedBooksWithScores))
then
      System.out.println("Rule [Final recommendation] - fired");
      recommendedBooks = new ArrayList($booksToRecommendSorted);
end